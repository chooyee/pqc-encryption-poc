<!-- public/monitor.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Socket.IO Message Monitor</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      margin: 20px;
      background-color: #f5f5f5;
    }
    h1 {
      color: #333;
    }
    #controls {
      margin-bottom: 15px;
      display: flex;
      gap: 10px;
      align-items: center;
    }
    button {
      padding: 8px 12px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #45a049;
    }
    #filterInput {
      padding: 8px;
      width: 200px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    #messages {
      background-color: white;
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 15px;
      height: 70vh;
      overflow-y: auto;
    }
    .message {
      padding: 10px;
      margin-bottom: 8px;
      border-radius: 4px;
      border-left: 4px solid #2196F3;
      background-color: #f9f9f9;
    }
    .message:hover {
      background-color: #f0f0f0;
    }
    .timestamp {
      color: #666;
      font-size: 0.8em;
    }
    .socketId {
      color: #2196F3;
      font-weight: bold;
    }
    .event {
      color: #E91E63;
      font-weight: bold;
    }
    .data {
      margin-top: 5px;
      padding: 5px;
      background-color: #f0f0f0;
      border-radius: 4px;
      font-family: monospace;
      white-space: pre-wrap;
    }
    .connection {
      border-left: 4px solid #4CAF50;
    }
    .disconnection {
      border-left: 4px solid #F44336;
    }
  </style>
</head>
<body>
  <h1>Socket.IO Message Monitor</h1>
  
  <div id="controls">
    <input type="text" id="filterInput" placeholder="Filter by event name...">
    <button id="clearBtn">Clear Messages</button>
    <button id="pauseBtn">Pause</button>
    <span id="status">Connected to monitor</span>
  </div>
  
  <div id="messages"></div>

  <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
  <script>
    // Connect to the monitor namespace
    const socket = io('/monitor');
    const messagesContainer = document.getElementById('messages');
    const filterInput = document.getElementById('filterInput');
    const clearBtn = document.getElementById('clearBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    const statusSpan = document.getElementById('status');
    
    let isPaused = false;
    
    // Handle receiving a message
    function addMessage(messageData, prepend = false) {
      // Apply filter if needed
      const filter = filterInput.value.toLowerCase();
      if (filter && messageData.event && !messageData.event.toLowerCase().includes(filter)) {
        return;
      }
      
      const messageElement = document.createElement('div');
      messageElement.className = 'message';
      
      // Add special styling for connection/disconnection events
      if (messageData.event === 'connection') {
        messageElement.classList.add('connection');
      } else if (messageData.event === 'client_disconnected') {
        messageElement.classList.add('disconnection');
      }
      
      let html = `
        <div class="timestamp">${messageData.timestamp}</div>
        <div class="socketId">${messageData.socketId}</div>
        <div class="event">${messageData.event}</div>
      `;
      
      console.log(messageData.data)
      // Format the data as JSON if present
      if (messageData.data) {
        try {
          const formattedData = JSON.stringify(messageData.data, null, 2);
          html += `<div class="data">${formattedData}</div>`;
        } catch (e) {
          html += `<div class="data">Error formatting data: ${e.message}</div>`;
        }
      }
      
      messageElement.innerHTML = html;
      
      if (prepend) {
        messagesContainer.prepend(messageElement);
      } else {
        messagesContainer.appendChild(messageElement);
        // Auto-scroll to bottom unless paused
        if (!isPaused) {
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
      }
    }
    
    // Handle connection event
    socket.on('connect', () => {
      statusSpan.textContent = 'Connected to monitor';
      statusSpan.style.color = '#4CAF50';
    });
    
    // Handle disconnection event
    socket.on('disconnect', () => {
      statusSpan.textContent = 'Disconnected from monitor';
      statusSpan.style.color = '#F44336';
    });
    
    // Receive recent messages when connecting
    socket.on('recent_messages', (messages) => {
      messagesContainer.innerHTML = '';
      messages.forEach(msg => addMessage(msg));
    });
    
    // Receive new messages
    socket.on('message_received', (messageData) => {
      if (!isPaused) {
        addMessage(messageData);
      }
    });

     // Receive new messages
     socket.on('message_sent', (messageData) => {
      if (!isPaused) {
        addMessage(messageData);
      }
    });
    
    // Handle client disconnections
    socket.on('client_disconnected', (data) => {
      if (!isPaused) {
        addMessage({
          ...data,
          event: 'client_disconnected'
        });
      }
    });
    
    // Clear messages button
    clearBtn.addEventListener('click', () => {
      messagesContainer.innerHTML = '';
    });
    
    // Pause/Resume button
    pauseBtn.addEventListener('click', () => {
      isPaused = !isPaused;
      pauseBtn.textContent = isPaused ? 'Resume' : 'Pause';
    });
    
    // Filter input
    filterInput.addEventListener('input', () => {
      const filter = filterInput.value.toLowerCase();
      const messages = messagesContainer.querySelectorAll('.message');
      
      messages.forEach(msg => {
        const eventEl = msg.querySelector('.event');
        if (eventEl) {
          const eventText = eventEl.textContent.toLowerCase();
          if (filter === '' || eventText.includes(filter)) {
            msg.style.display = '';
          } else {
            msg.style.display = 'none';
          }
        }
      });
    });
  </script>
</body>
</html>